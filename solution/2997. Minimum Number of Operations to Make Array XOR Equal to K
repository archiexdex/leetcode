# [2997. Minimum Number of Operations to Make Array XOR Equal to K](https://leetcode.com/problems/minimum-number-of-operations-to-make-array-xor-equal-to-k)

## Description
You are given a 0-indexed integer array nums and a positive integer k.

You can apply the following operation on the array any number of times:

Choose any element of the array and flip a bit in its binary representation. Flipping a bit means changing a 0 to 1 or vice versa.
Return the minimum number of operations required to make the bitwise XOR of all elements of the final array equal to k.

Note that you can flip leading zero bits in the binary representation of elements. For example, for the number (101)2 you can flip the fourth bit and obtain (1101)2.


## Solutions
We want to find the minimum number of operations that bitwise XOR of all elements of the array equals to k. For bitwise XOR, if two bits are same, then result is 0, vise versa. So we can perform XOR for all elements in the array $num$ and then bitwise XOR with $k$, which is the XOR diffence to $k$. The number of bit in the result presents 1 means the minimum operations.

Time Complexity is $O(n)$.
Space Complexity is $O(1)$.

<!-- tabs:start -->

```cpp
class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        int res = k, ans = 0;
        for (int num: nums) {
            res ^= num;
        }
        for (int i = 0; i < 32; ++i) {
            if ((res >> i) & 1) {
                ++ans;
            }
        }
        return ans;
    }
};
```

<!-- tabs:end -->

<!-- end -->
